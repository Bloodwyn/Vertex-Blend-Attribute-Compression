/*
Copyright 2021 Bastian Kuth bastian.kuth@stud.hs-coburg.de, Quirin Meyer

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

#pragma once
#ifndef VBAC_COMPRESSION
#define VBAC_COMPRESSION

/* C interface */
#ifdef __cplusplus
extern "C" {
#endif

#include <stdio.h>
#include <stdlib.h> 
#include <stdint.h>
#include <math.h>

typedef uint8_t bone_index;

/* struct that gets generated by the OSS compression function. Needs to be passed to the decompression function */
typedef struct {
	uint64_t N;    /* number of sample points at the v2 axis								   */
	uint64_t MI4;  /* maximum global Index into v4 axis (used for flipping the function)	   */
	double scale;  /* distance between two saple points (twice the maximum quantization error) */
} vbac_oss_info;

/* --- DECLARATION OF INTERFACE FUNCTIONS --- */

/*
 * Sorts a weight tuple and the corresponding index tuple descending by weight (w1 >= w2 >= w3 ...)
 * Takes an array of weights and an array of indices. weightsPerTuple is usually 4. nTuples is the total number of weight and index tuples.
 * Selection sort is used to sort the tuples
 */
void vbac_sortTuplesByWeight(
	float* const weightTuples,
	bone_index* const indexTuples,
	size_t const weightsPerTuple,
	size_t const nTuples
);

/*
 * Compresses the weight tuples with the OSS method. 
 * Returns the vbac_oss_info struct that is required for decompression.
 */
vbac_oss_info vbac_oss_compress(
	float const* weightTuples,
	size_t const nTuples,
	size_t const totalBits,
	uint64_t* const compressedData
);

/*
 * Decompresses the weight tuples compressed with the OSS method.
 * As this is supposed to be done on the GPU, this function is only ment to be used for testing.
 */
void vbac_oss_decompress(
	uint64_t const* compressedData,
	size_t const nTuples,
	vbac_oss_info const info,
	float* weightTuples
);

#ifdef __cplusplus
}
#endif
#endif