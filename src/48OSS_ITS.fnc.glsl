/*
Copyright 2021 Bastian Kuth bastian.kuth@stud.hs-coburg.de, Quirin Meyer

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

//! #version 430
//! #extension GL_NV_gpu_shader5 : enable
layout(location = 4) in uvec3 packedInVec;

/* struct that gets generated by the ssq compression function. Needs to be passed to the decompression function */
struct vbac_ssq_fix4_info {
	uint N;      /* number of sample points at the v2 axis									 */
	uvec2 MI4;    /* maximum Index into v4 axis (used for flipping the function)				 */
	float scale; /* distance between two saple points (twice the maximum quantization error) */
};

vbac_ssq_fix4_info vbac_ssq_info = vbac_ssq_fix4_info (17038u, /*274851451200ul*/ uvec2(63u, 4268511552u), 2.93478897e-05);

uvec2 ulmul(uint a, uint b){
	uvec2 result;
	umulExtended(a, b, result.x, result.y);
	return result;
	//return tov(ulong(a) * ulong(b));
}
uvec2 uladd(uvec2 a, uint b){
	uint carry; // fisher
	uint lo = uaddCarry(a.y, b, carry);
	return uvec2 (a.x + carry, lo);
	//return tov(togl(a) + ulong(b));
}
uvec2 uladd(uvec2 a, uvec2 b){
	uint carry;
	uint lo = uaddCarry(a.y, b.y, carry);
	return uvec2 (a.x + b.x + carry, lo);
	//return tov(togl(a) + togl(b));
}
uvec2 ulsub(uvec2 a, uvec2 b){
	uint borrow;
	uint lo = usubBorrow(a.y, b.y, borrow);
	return uvec2 (a.x - b.x - borrow, lo);
	//return tov(togl(a) - togl(b));
}
bool ulgr(uvec2 a, uvec2 b){ // a > b
	if(a.x > b.x) return true;
	if(a.x < b.x) return false;
	return a.y > b.y;
}
float ul2f(uvec2 a) {
	return float(a.x) * intBitsToFloat(0x4f800000) + a.y;
}


uint ssq_baseIdx3(uint ic, uint n) {
	uint a = 2u * n-3u * ic + 1u;
	uint a2 = a * a;
	uint r = (a2) % 12u;
	return a2 / 12u + uint(r >= 6);
}
uint ssq_solveForI3(uint I, uint n) {
	uint X = ssq_baseIdx3(0u, n) - I;
	float a = 2.f * float(n)+1.f - sqrt(uint(12u * X));
	uint ic = uint(a) / 3u;

	/* fix off-by-one */
	uint lower = ssq_baseIdx3(ic, n);
	uint upper = ssq_baseIdx3(ic + 1u, n);

	return ic - uint(X > lower) + uint(X <= upper);
}
uvec2 ssq_baseIdx4(uint id, uint n) {
	uint a = 2u * id - n - 1u;
	uint a2 = (a * a) / 36u;
	uint a2r = (a * a) % 36u;
	uint b = 3u - 2u * a;
	uvec2 I = uladd(ulmul(a2, b), (a2r * b + 18u) / 36u);
	return I;
}
uint ssq_solveForI4(uvec2 I, uint n, uvec2 MI4) {
	/* ulong X = ssq_baseIdx4(0u, n) - I; */
	/* As ssq_baseIdx4(0u, n) is static, we can precompute it on the CPU and store it in MI4 instead */
	uvec2 X = ulsub(MI4, I);
	float b = ul2f(X) * 144.f;
	float cr = pow(float(b), 1.f / 3.f);
	float f = (cr + float(1.f) / cr);
	uint id = uint((int(n) * 2 + 3 - int(f)) / 4);
	uvec2 lower = ssq_baseIdx4(id, n);
	return id - uint(ulgr(X, lower));
}

//vbac_vec4 ssq_fix4_decompressTuple(ulong I, vbac_ssq_fix4_info const info) {
vec4 decompressWeights (){
	uvec2 I = uvec2(0);

	//________________zzzzzzzzzzzzzzzzyyyyyyyyyyyyyyyyxxxxxxiiiiiiiiii
	//aaaaaaaaaaaaaaaaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
	I.y = (packedInVec.z << 22u) | (packedInVec.y << 6u) | (packedInVec.x >> 10u);
	I.x = packedInVec.z >> 10u;

	uint i, j, k;

	uint N = vbac_ssq_info.N;
	k = ssq_solveForI4(I, N, vbac_ssq_info.MI4);

	/* ssq_baseIdx4(0u, N) computed on CPU and saved in info.MI4 */
	//uint I_ = uint(I - (vbac_ssq_info.MI4 - ssq_baseIdx4(k, N)));
	uint I_ = (ulsub(uladd(I, ssq_baseIdx4(k, N)), vbac_ssq_info.MI4)).y;

	N -= 2u * k;
	j = ssq_solveForI3(I_, N);

	I_ -= (N*N+N+1)/3u - ssq_baseIdx3(j, N);
	i = I_;

	/* shear alias delta code */
	j += k;
	i += j;

	vec4 v = { /* .x = */ 1.f, /* .y = */ 0.f, /* .z = */ 0.f, /* .w = */ 0.f };

	v.y = float(i)*vbac_ssq_info.scale;
	v.x -= v.y;

	v.z = float(j)*vbac_ssq_info.scale;
	v.x -= v.z;

	v.w = float(k)*vbac_ssq_info.scale;
	v.x -= v.w;

	return v;
}

#ifdef GL_NV_gpu_shader5
layout (packed) uniform idxSetBuffer{	u8vec4 indexTupleSet[2048];	};
uvec4 decompressIndices(){
	uint idx = packedInVec.x & 1023u;
	return uvec4(indexTupleSet[idx]);
}
#else
layout (std140) uniform idxSetBuffer{	uvec4 indexTupleSet[2048];	};
uvec4 decompressIndices(){
	uint idx = packedInVec.x & 1023u;
	uint tpl = indexTupleSet[idx/4u][idx%4u];
	return uvec4(
	(tpl >> 0) & 0xFFu,
	(tpl >> 8) & 0xFFu,
	(tpl >> 16) & 0xFFu,
	(tpl >> 24) & 0xFFu);
}
#endif